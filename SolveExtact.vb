'Generated by the GOLD Parser Builder

Option Explicit On
Option Strict Off

Imports System.IO
Imports System.Windows.Forms;


Module MyParser
    Private Parser As New GOLD.Parser

    Private Enum SymbolIndex
        [Eof] = 0                                 ' (EOF)
        [Error] = 1                               ' (Error)
        [Whitespace] = 2                          ' Whitespace
        [Minus] = 3                               ' '-'
        [Minusminus] = 4                          ' '--'
        [Lparen] = 5                              ' '('
        [Rparen] = 6                              ' ')'
        [Times] = 7                               ' '*'
        [Comma] = 8                               ' ','
        [Div] = 9                                 ' '/'
        [Semi] = 10                               ' ';'
        [Lbracket] = 11                           ' '['
        [Rbracket] = 12                           ' ']'
        [Caret] = 13                              ' '^'
        [Lbrace] = 14                             ' '{'
        [Rbrace] = 15                             ' '}'
        [Plus] = 16                               ' '+'
        [Plusplus] = 17                           ' '++'
        [Eq] = 18                                 ' '='
        [Arccos] = 19                             ' arccos
        [Arcsin] = 20                             ' arcsin
        [Arctan] = 21                             ' arctan
        [Cos] = 22                                ' cos
        [Cot] = 23                                ' cot
        [Csc] = 24                                ' csc
        [Definir] = 25                            ' definir
        [E] = 26                                  ' e
        [Exp] = 27                                ' exp
        [Float] = 28                              ' Float
        [Graph] = 29                              ' graph
        [Id] = 30                                 ' ID
        [Integer] = 31                            ' Integer
        [Ln] = 32                                 ' ln
        [Log] = 33                                ' log
        [Log2] = 34                               ' 'log2'
        [Pi] = 35                                 ' pi
        [Sec] = 36                                ' sec
        [Sin] = 37                                ' sin
        [Sqrt] = 38                               ' sqrt
        [Tan] = 39                                ' tan
        [Var] = 40                                ' var
        [Assign] = 41                             ' <Assign>
        [Call] = 42                               ' <Call>
        [Declaration] = 43                        ' <Declaration>
        [Expression] = 44                         ' <Expression>
        [Funcassign] = 45                         ' <Func Assign>
        [Funcdef] = 46                            ' <Func Def>
        [Listexp] = 47                            ' <List Exp>
        [Listid] = 48                             ' <List ID>
        [Multexp] = 49                            ' <Mult Exp>
        [Postunaryexp] = 50                       ' <PostUnary Exp>
        [Powexp] = 51                             ' <Pow Exp>
        [Start] = 52                              ' <Start>
        [Unaryexp] = 53                           ' <Unary Exp>
        [Value] = 54                              ' <Value>
    End Enum

    Private Enum ProductionIndex
        [Start] = 0                               ' <Start> ::= <Declaration>
        [Start2] = 1                              ' <Start> ::= <Func Def>
        [Start3] = 2                              ' <Start> ::= <Expression>
        [Declaration_Var_Id_Semi] = 3             ' <Declaration> ::= var ID ';'
        [Declaration_Var] = 4                     ' <Declaration> ::= var <Assign>
        [Declaration] = 5                         ' <Declaration> ::= <Assign>
        [Assign_Id_Eq_Semi] = 6                   ' <Assign> ::= ID '=' <Expression> ';'
        [Funcdef_Definir_Id_Lparen_Rparen_Semi] = 7 ' <Func Def> ::= definir ID '(' <List ID> ')' ';'
        [Funcdef_Definir] = 8                     ' <Func Def> ::= definir <Func Assign>
        [Funcdef_Semi] = 9                        ' <Func Def> ::= <Expression> ';'
        [Funcassign_Id_Lparen_Rparen_Eq_Semi] = 10 ' <Func Assign> ::= ID '(' <List ID> ')' '=' <Expression> ';'
        [Listid_Comma_Id] = 11                    ' <List ID> ::= <List ID> ',' ID
        [Listid_Id] = 12                          ' <List ID> ::= ID
        [Expression_Plus] = 13                    ' <Expression> ::= <Expression> '+' <Mult Exp>
        [Expression_Minus] = 14                   ' <Expression> ::= <Expression> '-' <Mult Exp>
        [Expression] = 15                         ' <Expression> ::= <Mult Exp>
        [Multexp_Times] = 16                      ' <Mult Exp> ::= <Mult Exp> '*' <Pow Exp>
        [Multexp_Div] = 17                        ' <Mult Exp> ::= <Mult Exp> '/' <Pow Exp>
        [Multexp] = 18                            ' <Mult Exp> ::= <Pow Exp>
        [Powexp_Caret] = 19                       ' <Pow Exp> ::= <Pow Exp> '^' <Unary Exp>
        [Powexp] = 20                             ' <Pow Exp> ::= <Unary Exp>
        [Unaryexp_Minus] = 21                     ' <Unary Exp> ::= '-' <Value>
        [Unaryexp_Plusplus_Id] = 22               ' <Unary Exp> ::= '++' ID
        [Unaryexp_Minusminus_Id] = 23             ' <Unary Exp> ::= '--' ID
        [Unaryexp] = 24                           ' <Unary Exp> ::= <PostUnary Exp>
        [Unaryexp2] = 25                          ' <Unary Exp> ::= <Value>
        [Postunaryexp_Id_Plusplus] = 26           ' <PostUnary Exp> ::= ID '++'
        [Postunaryexp_Id_Minusminus] = 27         ' <PostUnary Exp> ::= ID '--'
        [Postunaryexp] = 28                       ' <PostUnary Exp> ::= <Call>
        [Call_Id_Lparen_Rparen] = 29              ' <Call> ::= ID '(' <List Exp> ')'
        [Value_E] = 30                            ' <Value> ::= e
        [Value_Pi] = 31                           ' <Value> ::= pi
        [Value_Id] = 32                           ' <Value> ::= ID
        [Value_Float] = 33                        ' <Value> ::= Float
        [Value_Integer] = 34                      ' <Value> ::= Integer
        [Value_Sin_Lparen_Rparen] = 35            ' <Value> ::= sin '(' <Expression> ')'
        [Value_Cos_Lparen_Rparen] = 36            ' <Value> ::= cos '(' <Expression> ')'
        [Value_Tan_Lparen_Rparen] = 37            ' <Value> ::= tan '(' <Expression> ')'
        [Value_Csc_Lparen_Rparen] = 38            ' <Value> ::= csc '(' <Expression> ')'
        [Value_Sec_Lparen_Rparen] = 39            ' <Value> ::= sec '(' <Expression> ')'
        [Value_Cot_Lparen_Rparen] = 40            ' <Value> ::= cot '(' <Expression> ')'
        [Value_Arcsin_Lparen_Rparen] = 41         ' <Value> ::= arcsin '(' <Expression> ')'
        [Value_Arccos_Lparen_Rparen] = 42         ' <Value> ::= arccos '(' <Expression> ')'
        [Value_Arctan_Lparen_Rparen] = 43         ' <Value> ::= arctan '(' <Expression> ')'
        [Value_Ln_Lparen_Rparen] = 44             ' <Value> ::= ln '(' <Expression> ')'
        [Value_Log2_Lparen_Rparen] = 45           ' <Value> ::= 'log2' '(' <Expression> ')'
        [Value_Log_Lparen_Rparen] = 46            ' <Value> ::= log '(' <Expression> ')'
        [Value_Exp_Lparen_Rparen] = 47            ' <Value> ::= exp '(' <Expression> ')'
        [Value_Sqrt_Lparen_Rparen] = 48           ' <Value> ::= sqrt '(' <Expression> ')'
        [Value_Graph_Lparen_Rparen] = 49          ' <Value> ::= graph '(' <Expression> ')'
        [Value_Lbracket_Rbracket] = 50            ' <Value> ::= '[' <Expression> ']'
        [Value_Lbrace_Rbrace] = 51                ' <Value> ::= '{' <Expression> '}'
        [Value_Lparen_Rparen] = 52                ' <Value> ::= '(' <Expression> ')'
        [Listexp_Comma] = 53                      ' <List Exp> ::= <List Exp> ',' <Expression>
        [Listexp] = 54                            ' <List Exp> ::= <Expression>
    End Enum

    Public Program As Object     'You might derive a specific object

    Public Sub Setup()
        'This procedure can be called to load the parse tables. The class can
        'read tables using a BinaryReader.
        
        Parser.LoadTables(Path.Combine(Application.StartupPath, "grammar.egt"))
    End Sub
    
    Public Function Parse(ByVal Reader As TextReader) As Boolean
        'This procedure starts the GOLD Parser Engine and handles each of the
        'messages it returns. Each time a reduction is made, you can create new
        'custom object and reassign the .CurrentReduction property. Otherwise, 
        'the system will use the Reduction object that was returned.
        '
        'The resulting tree will be a pure representation of the language 
        'and will be ready to implement.

        Dim Response As GOLD.ParseMessage
        Dim Done as Boolean                  'Controls when we leave the loop
        Dim Accepted As Boolean = False      'Was the parse successful?

        Accepted = False    'Unless the program is accepted by the parser

        Parser.Open(Reader)
        Parser.TrimReductions = False  'Please read about this feature before enabling  

        Done = False
        Do Until Done
            Response = Parser.Parse()

            Select Case Response              
                Case GOLD.ParseMessage.LexicalError
                    'Cannot recognize token
                    Done = True

                Case GOLD.ParseMessage.SyntaxError
                    'Expecting a different token
                    Done = True

                Case GOLD.ParseMessage.Reduction
                    'Create a customized object to store the reduction
                    .CurrentReduction = CreateNewObject(Parser.CurrentReduction)

                Case GOLD.ParseMessage.Accept
                    'Accepted!
                    'Program = Parser.CurrentReduction  'The root node!                 
                    Done = True
                    Accepted = True

                Case GOLD.ParseMessage.TokenRead
                    'You don't have to do anything here.

                Case GOLD.ParseMessage.InternalError
                    'INTERNAL ERROR! Something is horribly wrong.
                    Done = True

                Case GOLD.ParseMessage.NotLoadedError
                    'This error occurs if the CGT was not loaded.                   
                    Done = True

                Case GOLD.ParseMessage.GroupError 
                    'COMMENT ERROR! Unexpected end of file
                    Done = True
            End Select
        Loop

        Return Accepted
    End Function

    Private Function CreateNewObject(Reduction as GOLD.Reduction) As Object
        Dim Result As Object = Nothing

        With Reduction
            Select Case .Parent.TableIndex                        
                Case ProductionIndex.Start                 
                    ' <Start> ::= <Declaration> 

                Case ProductionIndex.Start2                 
                    ' <Start> ::= <Func Def> 

                Case ProductionIndex.Start3                 
                    ' <Start> ::= <Expression> 

                Case ProductionIndex.Declaration_Var_Id_Semi                 
                    ' <Declaration> ::= var ID ';' 

                Case ProductionIndex.Declaration_Var                 
                    ' <Declaration> ::= var <Assign> 

                Case ProductionIndex.Declaration                 
                    ' <Declaration> ::= <Assign> 

                Case ProductionIndex.Assign_Id_Eq_Semi                 
                    ' <Assign> ::= ID '=' <Expression> ';' 

                Case ProductionIndex.Funcdef_Definir_Id_Lparen_Rparen_Semi                 
                    ' <Func Def> ::= definir ID '(' <List ID> ')' ';' 

                Case ProductionIndex.Funcdef_Definir                 
                    ' <Func Def> ::= definir <Func Assign> 

                Case ProductionIndex.Funcdef_Semi                 
                    ' <Func Def> ::= <Expression> ';' 

                Case ProductionIndex.Funcassign_Id_Lparen_Rparen_Eq_Semi                 
                    ' <Func Assign> ::= ID '(' <List ID> ')' '=' <Expression> ';' 

                Case ProductionIndex.Listid_Comma_Id                 
                    ' <List ID> ::= <List ID> ',' ID 

                Case ProductionIndex.Listid_Id                 
                    ' <List ID> ::= ID 

                Case ProductionIndex.Expression_Plus                 
                    ' <Expression> ::= <Expression> '+' <Mult Exp> 

                Case ProductionIndex.Expression_Minus                 
                    ' <Expression> ::= <Expression> '-' <Mult Exp> 

                Case ProductionIndex.Expression                 
                    ' <Expression> ::= <Mult Exp> 

                Case ProductionIndex.Multexp_Times                 
                    ' <Mult Exp> ::= <Mult Exp> '*' <Pow Exp> 

                Case ProductionIndex.Multexp_Div                 
                    ' <Mult Exp> ::= <Mult Exp> '/' <Pow Exp> 

                Case ProductionIndex.Multexp                 
                    ' <Mult Exp> ::= <Pow Exp> 

                Case ProductionIndex.Powexp_Caret                 
                    ' <Pow Exp> ::= <Pow Exp> '^' <Unary Exp> 

                Case ProductionIndex.Powexp                 
                    ' <Pow Exp> ::= <Unary Exp> 

                Case ProductionIndex.Unaryexp_Minus                 
                    ' <Unary Exp> ::= '-' <Value> 

                Case ProductionIndex.Unaryexp_Plusplus_Id                 
                    ' <Unary Exp> ::= '++' ID 

                Case ProductionIndex.Unaryexp_Minusminus_Id                 
                    ' <Unary Exp> ::= '--' ID 

                Case ProductionIndex.Unaryexp                 
                    ' <Unary Exp> ::= <PostUnary Exp> 

                Case ProductionIndex.Unaryexp2                 
                    ' <Unary Exp> ::= <Value> 

                Case ProductionIndex.Postunaryexp_Id_Plusplus                 
                    ' <PostUnary Exp> ::= ID '++' 

                Case ProductionIndex.Postunaryexp_Id_Minusminus                 
                    ' <PostUnary Exp> ::= ID '--' 

                Case ProductionIndex.Postunaryexp                 
                    ' <PostUnary Exp> ::= <Call> 

                Case ProductionIndex.Call_Id_Lparen_Rparen                 
                    ' <Call> ::= ID '(' <List Exp> ')' 

                Case ProductionIndex.Value_E                 
                    ' <Value> ::= e 

                Case ProductionIndex.Value_Pi                 
                    ' <Value> ::= pi 

                Case ProductionIndex.Value_Id                 
                    ' <Value> ::= ID 

                Case ProductionIndex.Value_Float                 
                    ' <Value> ::= Float 

                Case ProductionIndex.Value_Integer                 
                    ' <Value> ::= Integer 

                Case ProductionIndex.Value_Sin_Lparen_Rparen                 
                    ' <Value> ::= sin '(' <Expression> ')' 

                Case ProductionIndex.Value_Cos_Lparen_Rparen                 
                    ' <Value> ::= cos '(' <Expression> ')' 

                Case ProductionIndex.Value_Tan_Lparen_Rparen                 
                    ' <Value> ::= tan '(' <Expression> ')' 

                Case ProductionIndex.Value_Csc_Lparen_Rparen                 
                    ' <Value> ::= csc '(' <Expression> ')' 

                Case ProductionIndex.Value_Sec_Lparen_Rparen                 
                    ' <Value> ::= sec '(' <Expression> ')' 

                Case ProductionIndex.Value_Cot_Lparen_Rparen                 
                    ' <Value> ::= cot '(' <Expression> ')' 

                Case ProductionIndex.Value_Arcsin_Lparen_Rparen                 
                    ' <Value> ::= arcsin '(' <Expression> ')' 

                Case ProductionIndex.Value_Arccos_Lparen_Rparen                 
                    ' <Value> ::= arccos '(' <Expression> ')' 

                Case ProductionIndex.Value_Arctan_Lparen_Rparen                 
                    ' <Value> ::= arctan '(' <Expression> ')' 

                Case ProductionIndex.Value_Ln_Lparen_Rparen                 
                    ' <Value> ::= ln '(' <Expression> ')' 

                Case ProductionIndex.Value_Log2_Lparen_Rparen                 
                    ' <Value> ::= 'log2' '(' <Expression> ')' 

                Case ProductionIndex.Value_Log_Lparen_Rparen                 
                    ' <Value> ::= log '(' <Expression> ')' 

                Case ProductionIndex.Value_Exp_Lparen_Rparen                 
                    ' <Value> ::= exp '(' <Expression> ')' 

                Case ProductionIndex.Value_Sqrt_Lparen_Rparen                 
                    ' <Value> ::= sqrt '(' <Expression> ')' 

                Case ProductionIndex.Value_Graph_Lparen_Rparen                 
                    ' <Value> ::= graph '(' <Expression> ')' 

                Case ProductionIndex.Value_Lbracket_Rbracket                 
                    ' <Value> ::= '[' <Expression> ']' 

                Case ProductionIndex.Value_Lbrace_Rbrace                 
                    ' <Value> ::= '{' <Expression> '}' 

                Case ProductionIndex.Value_Lparen_Rparen                 
                    ' <Value> ::= '(' <Expression> ')' 

                Case ProductionIndex.Listexp_Comma                 
                    ' <List Exp> ::= <List Exp> ',' <Expression> 

                Case ProductionIndex.Listexp                 
                    ' <List Exp> ::= <Expression> 

            End Select
        End With     

        Return Result
    End Function
End Module
